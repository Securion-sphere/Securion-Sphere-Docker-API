name: CD - Self-Hosted Runner

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["CI"]
    branches: ["main"]
    types:
      - completed

jobs:
  build-and-deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    name: Build and Deploy Go Echo Service
    runs-on: self-hosted

    steps:
      # Checkout with minimal history
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Setup Go with version from go.mod
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"
          cache: true

      # Dependency verification
      - name: Install dependencies
        run: |
          go mod verify
          go mod download

      # Build with hardened flags
      - name: Build Go Echo service
        run: |
          CGO_ENABLED=0 GOOS=linux go build \
          -ldflags="-s -w -extldflags '-static'" \
          -o ~/docker-api

      # Controlled service restart
      - name: Restart Supervisor Service
        run: |
          # Check service status
          if sudo supervisorctl status docker-api | grep -q RUNNING; then
            echo "Stopping existing service..."
            sudo /usr/bin/supervisorctl stop docker-api
          fi

          # Start service with error handling
          if ! sudo supervisorctl start docker-api; then
            echo "Failed to start service. Checking logs..."
            sudo /usr/bin/supervisorctl status docker-api
            exit 1
          fi

          # Verify service status
          sleep 5
          sudo /usr/bin/supervisorctl status docker-api || exit 1
